5) Deployment Script (scripts/deploy.js)

Fill the placeholder wallets with your addresses (prefer multisig where possible).

const hre = require("hardhat");

async function main() {
  const totalSupply = hre.ethers.parseUnits("100000000", 18); // 100M BRG
  const PRESALE     = "0xPresaleWalletAddress";
  const ECOSYSTEM   = "0xEcosystemWalletAddress";
  const MARKETING   = "0xMarketingWalletAddress";
  const LIQUIDITY   = "0xLiquidityWalletAddress";
  const TEAM_BENEF  = "0xTeamMultisigAddress";

  const now = Math.floor(Date.now() / 1000);
  const VESTING_START = now + 60 * 60 * 24 * 180; // start in ~6 months (cliff), edit as you like
  const VESTING_DUR   = 60 * 60 * 24 * 730;       // ~24 months linear unlock

  const Factory = await hre.ethers.getContractFactory("BitReGenToken");
  const token = await Factory.deploy(
    totalSupply,
    PRESALE,
    ECOSYSTEM,
    MARKETING,
    LIQUIDITY,
    TEAM_BENEF,
    VESTING_START,
    VESTING_DUR
  );
  await token.waitForDeployment();

  console.log("BitReGen (BRG) deployed at:", await token.getAddress());
  console.log("Team vesting wallet:", await token.teamVesting());
}

main().catch((e) => { console.error(e); process.exitCode = 1; });

6) Basic Test (test/token.test.js) â€“ optional but recommended
const { expect } = require("chai");

describe("BitReGenToken", function () {
  it("mints correct totals and respects percentages", async function () {
    const [owner, a, b, c, d, team] = await ethers.getSigners();

    const total = ethers.parseUnits("100000000", 18);
    const now = Math.floor(Date.now() / 1000);
    const start = now + 86400;
    const dur = 86400 * 730;

    const Fac = await ethers.getContractFactory("BitReGenToken");
    const t = await Fac.deploy(total, a.address, b.address, c.address, d.address, team.address, start, dur);

    const p30 = total * 30n / 100n;
    const t20 = total * 20n / 100n;
    const e20 = total * 20n / 100n;
    const m15 = total * 15n / 100n;
    const l15 = total * 15n / 100n;

    expect(await t.totalSupply()).to.equal(total);
    expect(await t.balanceOf(a.address)).to.equal(p30);
    expect(await t.balanceOf(b.address)).to.equal(e20);
    expect(await t.balanceOf(c.address)).to.equal(m15);
    expect(await t.balanceOf(d.address)).to.equal(l15);

    const vestingAddr = await t.teamVesting();
    const vestingBal = await t.balanceOf(vestingAddr);
    expect(vestingBal).to.equal(t20);
  });
});


Run tests:

npx hardhat test
