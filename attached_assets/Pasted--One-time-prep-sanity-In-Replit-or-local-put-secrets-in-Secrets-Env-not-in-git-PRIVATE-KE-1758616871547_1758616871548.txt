) One-time prep (sanity)

In Replit (or local), put secrets in Secrets/Env (not in git):

PRIVATE_KEY=0x...

BSCSCAN_API_KEY=... (or just ETHERSCAN_API_KEY if you only have that; try BSCSCAN first for BNB)

Fund the deployer address with a small amount of BNB on BSC Testnet (for gas).

1) Set constructor params (scripts/deploy.js)

Edit these lines with testnet wallets first (can be throwaway addresses):

const totalSupply = hre.ethers.parseUnits("100000000", 18); // 100M BRG

const PRESALE     = "0xPresaleWalletAddress_Testnet";
const ECOSYSTEM   = "0xEcosystemWalletAddress_Testnet";
const MARKETING   = "0xMarketingWalletAddress_Testnet";
const LIQUIDITY   = "0xLiquidityWalletAddress_Testnet";
const TEAM_BENEF  = "0xTeamMultisigAddress_Testnet";

// Vesting times (UNIX seconds)
const now = Math.floor(Date.now() / 1000);
const VESTING_START = now + 60 * 60 * 24 * 30; // e.g. 30-day cliff for test
const VESTING_DUR   = 60 * 60 * 24 * 60;       // e.g. ~60 days linear for test


For mainnet, change to your real multisigs/EOAs and your real vesting schedule (e.g., start in 6 months, duration 24 months).

2) Compile
npx hardhat compile


If this errors, send me the console output (no secrets).

3) Deploy to BSC Testnet
npx hardhat run --network bscTestnet scripts/deploy.js


You’ll see:

BitReGen (BRG) deployed at: 0xYOUR_TOKEN
Team vesting wallet:        0xYOUR_VESTING_WALLET
Verify command: npx hardhat verify ...


Copy both addresses.

4) Verify on BscScan Testnet

Use the command printed by the script, or fill it like this:

npx hardhat verify --network bscTestnet 0xYOUR_TOKEN \
"100000000000000000000000000" \
"0xPresaleWalletAddress_Testnet" \
"0xEcosystemWalletAddress_Testnet" \
"0xMarketingWalletAddress_Testnet" \
"0xLiquidityWalletAddress_Testnet" \
"0xTeamMultisigAddress_Testnet" \
<VESTING_START_UNIX> \
<VESTING_DURATION_SECONDS>


Common gotchas:

The big number is totalSupply in wei (100,000,000 × 1e18).

Args must be exactly in the constructor order.

If verification complains about API, try with your BscScan key first; if still blocked, set ETHERSCAN_API_KEY and upgrade Hardhat/Toolbox to latest, then retry.

5) Quick testnet checks

Open the token on BscScan Testnet:

Read Contract → totalSupply, teamVesting(), wallet balances.

Open the vesting wallet address page: confirm it holds 20% and won’t release before VESTING_START.

Try a small transfer in MetaMask (add custom token using your token address).

(Optionally) Create a tiny BRG/BNB pool on PancakeSwap Testnet to validate UX.

6) Switch to Mainnet (when happy)

Replace all five wallet addresses in deploy.js with production addresses (prefer multisig for Ecosystem/Marketing/Liquidity, and TEAM_BENEF is a multisig beneficiary).

Set vesting to your real schedule (e.g., start in ~6 months, duration ~24 months).

Fund deployer with a bit of BNB (mainnet) for gas.

Deploy:

npx hardhat run --network bscMainnet scripts/deploy.js


Verify (mainnet) with the printed command.

7) Liquidity + Lock (mainnet)

Go to PancakeSwap → Liquidity and create BRG/BNB pool.

Seed it using your %15 Liquidity allocation.

Lock LP tokens via Team.Finance or Unicrypt (choose a meaningful lock period; 6–12 months minimum looks good).

Publish proof links:

Token (BscScan verified)

LP Lock link

Team Vesting address + schedule

Allocation wallets (Presale/Ecosystem/Marketing/Liquidity)

8) Presale (optional but common)

If you run a presale, do it via PinkSale/DxSale using the %30 Presale wallet.

After presale ends, add liquidity, lock LP, and announce all links.

9) Post-launch checklist

Add token to MetaMask for your community (contract address).

Submit to CoinGecko and CoinMarketCap once there’s trading and liquidity.

Put links on your site: Contract, Vesting, LP Lock, Audit/Review (if any).

Transfer contract ownership to a multisig (Safe) instead of renouncing on day 1.

Troubleshooting (quick)

INSUFFICIENT_FUNDS → fund the deployer with a bit more BNB.

invalid constructor args / cannot verify → make sure args order and types match exactly; retry with the printed verify command.

Provider/network issues → try another BSC RPC endpoint or rerun.

Plugin mismatch → npm i -D hardhat @nomicfoundation/hardhat-toolbox@latest.