1) Replit Setup

New Replit → Node.js
Open the shell (bottom) and run:

npm init -y
npm i -D hardhat @nomicfoundation/hardhat-toolbox
npm i @openzeppelin/contracts dotenv
npx hardhat
# Choose: "Create a JavaScript project" → Yes to .gitignore → Yes for sample tests → Install deps if asked


Ensure this structure (create missing files/folders):

.bitregen/
  contracts/
    BitReGenToken.sol
  scripts/
    deploy.js
  test/
    token.test.js
  .env
  hardhat.config.js
  package.json
  README.md

2) Environment Variables (.env)

⚠️ Never commit real keys.

PRIVATE_KEY=0xyour_deployer_private_key
BSCSCAN_API_KEY=your_bscscan_api_key


Use a dedicated wallet with small funds for testnet, separate one for mainnet.

3) Hardhat Config (hardhat.config.js)
require("dotenv").config();
require("@nomicfoundation/hardhat-toolbox");

const { PRIVATE_KEY, BSCSCAN_API_KEY } = process.env;

module.exports = {
  solidity: "0.8.20",
  networks: {
    bscTestnet: {
      url: "https://data-seed-prebsc-1-s1.binance.org:8545/",
      chainId: 97,
      accounts: PRIVATE_KEY ? [PRIVATE_KEY] : []
    },
    bscMainnet: {
      url: "https://bsc-dataseed.binance.org/",
      chainId: 56,
      accounts: PRIVATE_KEY ? [PRIVATE_KEY] : []
    }
  },
  etherscan: {
    apiKey: {
      bscTestnet: BSCSCAN_API_KEY,
      bscMainnet: BSCSCAN_API_KEY
    },
    customChains: [
      {
        network: "bscMainnet",
        chainId: 56,
        urls: { apiURL: "https://api.bscscan.com/api", browserURL: "https://bscscan.com" }
      },
      {
        network: "bscTestnet",
        chainId: 97,
        urls: { apiURL: "https://api-testnet.bscscan.com/api", browserURL: "https://testnet.bscscan.com" }
      }
    ]
  }
};

4) Token Contract (contracts/BitReGenToken.sol)

This uses OpenZeppelin and creates a vesting wallet for the Team allocation. Percentages are minted at deployment to specified wallets.

// SPDX-License-Identifier: MIT
pragma solidity ^0.8.20;

/**
 * BitReGen (BRG) – BEP-20 on BNB Chain
 * Tokenomics:
 *  - 30% Presale
 *  - 20% Team (locked via VestingWallet)
 *  - 20% Ecosystem
 *  - 15% Marketing
 *  - 15% Liquidity
 */

import "@openzeppelin/contracts/token/ERC20/ERC20.sol";
import "@openzeppelin/contracts/access/Ownable.sol";
import "@openzeppelin/contracts/finance/VestingWallet.sol";

contract BitReGenToken is ERC20, Ownable {
    // Percentages
    uint256 public constant PRESALE_PCT = 30;
    uint256 public constant TEAM_PCT    = 20;
    uint256 public constant ECOSYS_PCT  = 20;
    uint256 public constant MKT_PCT     = 15;
    uint256 public constant LIQ_PCT     = 15;

    // Supply
    uint256 public immutable MAX_SUPPLY;

    // Wallets
    address public immutable presaleWallet;
    address public immutable ecosystemWallet;
    address public immutable marketingWallet;
    address public immutable liquidityWallet;

    // Team vesting
    VestingWallet public teamVesting;

    event TeamVestingCreated(address vesting, address beneficiary, uint64 start, uint64 duration);

    constructor(
        uint256 _maxSupply,                // e.g. 100_000_000 * 1e18
        address _presaleWallet,
        address _ecosystemWallet,
        address _marketingWallet,
        address _liquidityWallet,
        address _teamBeneficiary,          // team multisig (beneficiary)
        uint64  _vestingStartTimestamp,    // UNIX seconds (can set in future for cliff)
        uint64  _vestingDurationSeconds    // e.g. 730 days (~24 months)
    )
        ERC20("BitReGen", "BRG")
        Ownable(msg.sender)
    {
        require(_maxSupply > 0, "Supply > 0");
        require(
            _presaleWallet != address(0) &&
            _ecosystemWallet != address(0) &&
            _marketingWallet != address(0) &&
            _liquidityWallet != address(0) &&
            _teamBeneficiary != address(0),
            "Zero address"
        );

        MAX_SUPPLY = _maxSupply;

        presaleWallet   = _presaleWallet;
        ecosystemWallet = _ecosystemWallet;
        marketingWallet = _marketingWallet;
        liquidityWallet = _liquidityWallet;

        // Calculate buckets
        uint256 presaleAmt = (_maxSupply * PRESALE_PCT) / 100;
        uint256 teamAmt    = (_maxSupply * TEAM_PCT)    / 100;
        uint256 ecosysAmt  = (_maxSupply * ECOSYS_PCT)  / 100;
        uint256 mktAmt     = (_maxSupply * MKT_PCT)     / 100;
        uint256 liqAmt     = (_maxSupply * LIQ_PCT)     / 100;

        // Mint to wallets
        _mint(presaleWallet, presaleAmt);
        _mint(ecosystemWallet, ecosysAmt);
        _mint(marketingWallet, mktAmt);
        _mint(liquidityWallet, liqAmt);

        // Create vesting wallet for Team and mint there
        teamVesting = new VestingWallet(
            _teamBeneficiary,
            _vestingStartTimestamp,
            _vestingDurationSeconds
        );
        emit TeamVestingCreated(address(teamVesting), _teamBeneficiary, _vestingStartTimestamp, _vestingDurationSeconds);

        _mint(address(teamVesting), teamAmt);

        require(totalSupply() == MAX_SUPPLY, "Mint mismatch");
    }
}


Vesting: Lineer serbest bırakma. Cliff istiyorsan start’ı geleceğe koy (ör. TGE+6 ay).

5) Deployment Script (scripts/deploy.js)

Fill the placeholder wallets with your addresses (prefer multisig where possible).

const hre = require("hardhat");

async function main() {
  const totalSupply = hre.ethers.parseUnits("100000000", 18); // 100M BRG
  const PRESALE     = "0xPresaleWalletAddress";
  const ECOSYSTEM   = "0xEcosystemWalletAddress";
  const MARKETING   = "0xMarketingWalletAddress";
  const LIQUIDITY   = "0xLiquidityWalletAddress";
  const TEAM_BENEF  = "0xTeamMultisigAddress";

  const now = Math.floor(Date.now() / 1000);
  const VESTING_START = now + 60 * 60 * 24 * 180; // start in ~6 months (cliff), edit as you like
  const VESTING_DUR   = 60 * 60 * 24 * 730;       // ~24 months linear unlock

  const Factory = await hre.ethers.getContractFactory("BitReGenToken");
  const token = await Factory.deploy(
    totalSupply,
    PRESALE,
    ECOSYSTEM,
    MARKETING,
    LIQUIDITY,
    TEAM_BENEF,
    VESTING_START,
    VESTING_DUR
  );
  await token.waitForDeployment();

  console.log("BitReGen (BRG) deployed at:", await token.getAddress());
  console.log("Team vesting wallet:", await token.teamVesting());
}

main().catch((e) => { console.error(e); process.exitCode = 1; });

6) Basic Test (test/token.test.js) – optional but recommended
const { expect } = require("chai");

describe("BitReGenToken", function () {
  it("mints correct totals and respects percentages", async function () {
    const [owner, a, b, c, d, team] = await ethers.getSigners();

    const total = ethers.parseUnits("100000000", 18);
    const now = Math.floor(Date.now() / 1000);
    const start = now + 86400;
    const dur = 86400 * 730;

    const Fac = await ethers.getContractFactory("BitReGenToken");
    const t = await Fac.deploy(total, a.address, b.address, c.address, d.address, team.address, start, dur);

    const p30 = total * 30n / 100n;
    const t20 = total * 20n / 100n;
    const e20 = total * 20n / 100n;
    const m15 = total * 15n / 100n;
    const l15 = total * 15n / 100n;

    expect(await t.totalSupply()).to.equal(total);
    expect(await t.balanceOf(a.address)).to.equal(p30);
    expect(await t.balanceOf(b.address)).to.equal(e20);
    expect(await t.balanceOf(c.address)).to.equal(m15);
    expect(await t.balanceOf(d.address)).to.equal(l15);

    const vestingAddr = await t.teamVesting();
    const vestingBal = await t.balanceOf(vestingAddr);
    expect(vestingBal).to.equal(t20);
  });
});


Run tests:

npx hardhat test

7) Compile & Deploy

Testnet:

npx hardhat compile
npx hardhat run --network bscTestnet scripts/deploy.js


Copy the deployed token address and vesting wallet address from the logs.

Verify on BscScan (Testnet):

npx hardhat verify --network bscTestnet <TOKEN_ADDRESS> \
  "100000000000000000000000000" \
  "0xPresaleWalletAddress" \
  "0xEcosystemWalletAddress" \
  "0xMarketingWalletAddress" \
  "0xLiquidityWalletAddress" \
  "0xTeamMultisigAddress" \
  <VESTING_START_UNIX> \
  <VESTING_DURATION_SECONDS>


The big number is totalSupply in wei (100,000,000 × 1e18).

Repeat with bscMainnet when ready.