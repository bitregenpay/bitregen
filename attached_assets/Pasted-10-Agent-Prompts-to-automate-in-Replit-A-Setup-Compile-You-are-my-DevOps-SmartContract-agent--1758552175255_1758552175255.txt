10) Agent Prompts (to automate in Replit)
A) Setup & Compile
You are my DevOps/SmartContract agent. In this Replit, create a Hardhat project for a BEP-20 token named BitReGen (symbol BRG). 
Add OpenZeppelin, create the contract at contracts/BitReGenToken.sol with 30% presale, 20% team (vesting with OpenZeppelin VestingWallet), 20% ecosystem, 15% marketing, 15% liquidity, total 100,000,000 supply, 18 decimals. 
Create scripts/deploy.js that mints to addresses read from constants in the script and sets vesting start and duration. 
Add hardhat.config.js with bscTestnet and bscMainnet RPCs. 
Then run: npx hardhat compile and confirm compilation success in the console output.

B) Fill Wallets & Deploy (Testnet)
Update scripts/deploy.js with these addresses:
PRESALE=0x..., ECOSYSTEM=0x..., MARKETING=0x..., LIQUIDITY=0x..., TEAM_BENEF=0x...
Set VESTING_START to current time + 6 months, duration 730 days.
Run: npx hardhat run --network bscTestnet scripts/deploy.js
Return the deployed token address and team vesting address.

C) Verify on BscScan (Testnet)
Using the deploy parameters from the last step, run the Hardhat verify task on bscTestnet. 
Provide the exact command and the verification result link.

D) Liquidity & Lock Playbook
Generate a step-by-step checklist to add BRG/BNB liquidity on PancakeSwap and lock LP tokens using Team Finance or Unicrypt. 
Include links and the data I need to input (token address, amount, lock duration).

E) Security Review
Run static checks (solidity-coverage if available, enable optimizer, review for common pitfalls like transfer taxes not present, mint cap fixed, reentrancy not applicable).
Output a short security checklist with items passed/failed and recommendations.

11) Gas & Optimizer Tips

In hardhat.config.js (optional, but helps):

module.exports = {
  solidity: {
    version: "0.8.20",
    settings: { optimizer: { enabled: true, runs: 500 } }
  },
  // ...networks & etherscan as above
};

12) Post-Launch Checklist

 Website + whitepaper (utility, roadmap, tokenomics graphics)

 Socials (Twitter/Telegram/Discord) live and active

 CoinGecko & CoinMarketCap submissions

 Multisig for treasury/marketing/ecosystem wallets (e.g., Safe)

 Press kit: contract address, LP lock link, vesting link, audit report (if available)

13) Compliance & Risk Notes (non-legal advice)

If you plan payment gateway + fiat, check local regulations; partnering with a licensed PSP/EMI is the fastest compliant route.

Avoid promising returns; design token utility clearly (discounts, staking for access, AI credits, etc.).

Keep transparent disclosures for presale terms, vesting, and treasury policies.

14) Quick Commands Recap
# install
npm i -D hardhat @nomicfoundation/hardhat-toolbox
npm i @openzeppelin/contracts dotenv

# compile
npx hardhat compile

# test (optional)
npx hardhat test

# deploy (testnet)
npx hardhat run --network bscTestnet scripts/deploy.js

# verify (testnet)
npx hardhat verify --network bscTestnet <DEPLOYED_ADDR> "<TOTAL_SUPPLY_WEI>" \
"0xPRESALE" "0xECOSYSTEM" "0xMARKETING" "0xLIQUIDITY" "0xTEAM" <VEST_START> <VEST_DUR>